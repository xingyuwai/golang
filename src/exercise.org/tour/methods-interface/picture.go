/*
 * @Author: Mr Bian
 * @Date: 2018-08-23 13:02:41
 * @LastEditors: Mr Bian
 * @LastEditTime: 2018-08-23 13:18:23
 * @Description:
 * @version:
 */

package main

import (
	"image"
	"image/color"
	"image/png"
	"os"
	"os/exec"
)

type MyImage struct {
	MinPoint, Maxpoint image.Point
}

// horse or mule , wait and see~
// return a slice of data of a picture generated by this function
func Pic(dx, dy int) [][]uint8 {
	const greyscale = 256

	var picture [][]uint8
	for i := 0; i < dy; i++ {
		line := make([]uint8, 0, dx)
		for j := 0; j < dx; j++ {
			line = append(line, uint8(i+j))
		}
		picture = append(picture, line)
	}
	return picture
}

func Show(f func(int, int) [][]uint8) {
	const (
		dx = 256
		dy = 256
	)
	data := f(dx, dy)
	m := image.NewNRGBA(image.Rect(0, 0, dx, dy))
	for y := 0; y < dy; y++ {
		for x := 0; x < dx; x++ {
			v := data[y][x]
			i := y*m.Stride + x*4
			m.Pix[i] = v
			m.Pix[i+1] = v
			m.Pix[i+2] = 255
			m.Pix[i+3] = 255
		}
	}
	ShowImage(m)
}

// base64 is a simple encryption.
func ShowImage(m image.Image) {
	const SavePath string = "/home/jia/Desktop/golang/src/exercise.org/tour/methods-interface/image.png"
	/**
	var buf bytes.Buffer
	err := png.Encode(&buf, m)
	if err != nil {
		panic(err)
	}
	enc := base64.StdEncoding.EncodeToString(buf.Bytes())
	fmt.Println("IMAGE:" + enc)
	*/

	// get the picture
	imgfile, err := os.Create(SavePath)
	if err != nil {
		panic(err)
	}
	defer imgfile.Close()

	// image format : png
	err = png.Encode(imgfile, m)
	if err != nil {
		panic(err)
	}

	c := "display " + SavePath
	const shell string = "bash"

	// package "os.exec" call shell commands
	cmd := exec.Command(shell, "-c", c)
	_, err = cmd.Output()
	if err != nil {
		panic(err)
	}
}

//ToDo
func (mi MyImage) ColorModel() color.Model {
	return color.RGBAModel

}

func (mi MyImage) Bounds() image.Rectangle {
	Bound_Rectangle := image.Rectangle{mi.MinPoint, mi.Maxpoint}
	return Bound_Rectangle
}

func (mi MyImage) At(x, y int) color.Color {
	const MaxColorValue uint8 = 255
	var RValue uint8 = uint8(x+y) % MaxColorValue
	var GValue uint8 = uint8(x*y) % MaxColorValue
	var BValue uint8 = uint8(x+3*y) % MaxColorValue
	var AValue uint8 = uint8(2*x+y) % MaxColorValue
	return color.RGBA{RValue, GValue, BValue, AValue}
}
